plugins {
    id 'java-library'
}

//base {
//    archivesName = "${mod_id}-${project.name}-${minecraft_version}"
//}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
}

repositories {
    mavenCentral()
    // https://docs.gradle.org/current/userguide/declaring_repositories.html#declaring_content_exclusively_found_in_one_repository
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups('org.spongepowered') }
    }
    exclusiveContent {
        forRepositories(
                maven {
                    name = 'ParchmentMC'
                    url = 'https://maven.parchmentmc.org/'
                },
                maven {
                    name = "NeoForge"
                    url = 'https://maven.neoforged.net/releases'
                }
        )
        filter { includeGroup('org.parchmentmc.data') }
    }
    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com'
    }
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:${project.name}:$version")
        capability("$group:${base.archivesName.get()}:$version")
        capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
        capability("$group:$mod_id:$version")
    }
//    publishing.publications.configureEach {
//        suppressPomMetadataWarningsFor(variant)
//    }
}


jar {
    // Makes it so it uses the archive name I specify
    archiveFileName.set("${mod_id}-${project.name}-${minecraft_version}-v${version}.jar")

    // Exclude some silly stuff to reduce size :3
    exclude "**/*.md"  // Exclude all markdown files


    from(rootProject.file("LICENSE")) {
        rename { "${it}-${mod_id}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : mod_author,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : mod_author,
                'Built-On-Minecraft'    : minecraft_version
        ])
    }
}

processResources {
    def expandProps = [
            "version": version,
            "group": project.group, //Else we target the task's group.
            "minecraft_version": minecraft_version,
            "minecraft_version_range": minecraft_version_range,
//            "fabric_api": fabric_api,
            "fabric_loader_version": fabric_loader_version,
            "fabric_loom": fabric_loom,
            "neoforge_version": neoforge_version,
            "neoforge_loader_version_range": neoforge_loader_version_range,
//            "NeoGradle": NeoGradle,
//            "quilt_loader_version": quilt_loader_version,
//            "quilt_fabric_api": quilt_fabric_api,
//            "quilt_loom": quilt_loom,
            "mod_name": mod_name,
            "mod_author": mod_author,
            "mod_id": mod_id,
            "license": license,
            "description": project.description,
            "credits": credits,
            "java_version": java_version
    ]

    var jsonExpandProps = expandProps.collectEntries {
        key, value -> [(key): value instanceof String ? value.replace("\n", "\\\\n") : value]
    }

    filesMatching(['META-INF/mods.toml', 'META-INF/neoforge.mods.toml']) {
        expand expandProps
    }

    filesMatching(['pack.mcmeta', 'fabric.mod.json', '*.mixins.json']) {
        expand jsonExpandProps
    }

    inputs.properties(expandProps)
}